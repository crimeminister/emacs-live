# contributor: Robert Medeiros <robert@crimeminister.org>
# name: Beam Skeleton
# group: Apache Beam
# key: ab_skel
# --
/**
 * An example Beam data processing program.
 */

package $1;

import java.util.Arrays;
import java.util.List;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.coders.StringUtf8Coder;
import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;
import org.apache.beam.sdk.options.Default;
import org.apache.beam.sdk.options.Description;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.options.Validation.Required;
import org.apache.beam.sdk.transforms.Create;

/**
 * A skeleton Beam data processing job.
 */
public class $2 {

    /**
     * Options supported by {@link $2}.
     */
    public interface $2Options extends GcpOptions {

        /** This is an example pipeline option. Please customize. */
        @Description("")
        //@Default.String("gs://path/to/file")
        @Required
        String getInputFile();
        void setInputFile();

        /** Set this required option to specify where to write the output. */
        @Description("Path of the file to write to")
        @Default.String("./output")
        @Required
        String getOutputFile();
        void setOutputFile(String value);
    }

    static void run$2($2Options options) {

        final Pipeline p = Pipeline.create(options);

        // Create PCollection from in-memory data.
        final List<String> LINES = Arrays.asList(
            "alpha",
            "beta",
            "gamma",
            "delta"
        );
        final Create.Values<String> lines = Create.of(LINES);

        p.apply(lines)
            .setCoder(StringUtf8Coder.of())
            //.apply(new TestTransform())
            ;

        p.run().waitUntilFinish();
    }

    public static void main(String[] args) {
        PipelineOptionsFactory.register($2Options.class);
        $2Options options = PipelineOptionsFactory
            .fromArgs(args)
            .withValidation()
            .as($2Options.class);

        run$2(options);
    }
}
