resource "google_compute_instance" "default" {
  project      = "${data.google_project.project.project_id}"
  name         = "${var.name}"
  machine_type = "${var.machine_type}"
  zone         = "${var.zone}"

  depends_on = [
    # We can't pull packages and data to initialize the instance during
    # startup without access to the outside.
    "google_compute_router_nat.simple_nat",

    # We need the database to be available before the instance starts.
    "google_sql_user.airflow",
  ]

  tags = [
    "airflow",
  ]

  boot_disk {
    initialize_params {
      size = "${var.disk_space}"
      image = "ubuntu-os-cloud/ubuntu-1804-lts"
    }
  }

  // Local SSD disk
  scratch_disk {}

  network_interface {
    subnetwork = "${data.google_compute_subnetwork.default.self_link}"
  }

  metadata = {
    "enable-oslogin" = "TRUE"

    # Specify the bucket from which a cron job in the Airflow instance
    # will try to pull in DAGs and other required resources. This should
    # be the same bucket that DAGs are deposited into via Cloud Build,
    # pulling from the cio-insights-etl-dags GitHub repository.
    "airflow-bucket" = "${module.airflow_dags.bucket_url}"

    # The relational database we'll use as the Airflow backing store.
    "airflow-database" = "${google_sql_database_instance.airflow.name}"

    # The database user to configure Airflow to connect as.
    "airflow-database-user" = "${google_sql_user.airflow.name}"

    # STMP configuration
    "smtp-host"      = "${var.smtp_host}"
    "smtp-starttls"  = "${var.smtp_starttls}"
    "smtp-ssl"       = "${var.smtp_ssl}"
    "smtp-port"      = "${var.smtp_port}"
    "smtp-mail-from" = "${var.smtp_mail_from}"
    "smtp-auth"      = "${var.smtp_auth}"
    "smtp-user"      = "${var.smtp_user}"
    "smtp-password"  = "${var.smtp_password}"
  }

  metadata_startup_script = "${file("${path.module}/startup.sh")}"

  service_account {
    email = "${module.airflow_service_account.email}"

    # Best practice is to assign the full cloud-platform access scope on
    # the instance and then securely limit the service account used by
    # the instance via IAM roles/permissions. NB: scopes are not a
    # security mechanism (they're a legacy means of specifying instance
    # permissions!).
    scopes = [
      "cloud-platform",
    ]
  }
}
